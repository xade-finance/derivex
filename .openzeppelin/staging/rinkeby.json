{
  "manifestVersion": "3.1",
  "impls": {
    "dbd7bd5fb44641a9a7a489e946d3180574779b3dc63a57f3c5bd429553af4ab9": {
      "address": "0x2cf76F595Ff00Ee810Cddf2409908770c44bc3Fb",
      "txHash": "0x8f060272513f808bd848fa9b386c339874302cce0282c1b77c97ef5c50727680",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "DecimalERC20",
            "label": "decimalMap",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "src/utils/DecimalERC20.sol:12"
          },
          {
            "contract": "DecimalERC20",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/DecimalERC20.sol:23"
          },
          {
            "contract": "BaseBridge",
            "label": "ambBridge",
            "type": "t_contract(IAMB)16268",
            "src": "src/bridge/BaseBridge.sol:27"
          },
          {
            "contract": "BaseBridge",
            "label": "multiTokenMediator",
            "type": "t_contract(IMultiTokenMediator)16280",
            "src": "src/bridge/BaseBridge.sol:30"
          },
          {
            "contract": "BaseBridge",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/bridge/BaseBridge.sol:44"
          },
          {
            "contract": "RootBridge",
            "label": "priceFeed",
            "type": "t_contract(IPriceFeed)18732",
            "src": "src/bridge/ethereum/RootBridge.sol:17"
          },
          {
            "contract": "RootBridge",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/bridge/ethereum/RootBridge.sol:31"
          }
        ],
        "types": {
          "t_contract(IPriceFeed)18732": {
            "label": "contract IPriceFeed"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IAMB)16268": {
            "label": "contract IAMB"
          },
          "t_contract(IMultiTokenMediator)16280": {
            "label": "contract IMultiTokenMediator"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "f2f138f13395b2cb5d31f3b5d716be05acd3ff35f6fd1ace35796f0f32d969c3": {
      "address": "0x4830323E962729d2C8EfDe66EB73434038437314",
      "txHash": "0x0e8d3a6ffb21d97bf76930b97bfc8c8337c0038d147a2d99bd6c3f604c6963a3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "BlockContext",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/BlockContext.sol:13"
          },
          {
            "contract": "ChainlinkL1",
            "label": "priceFeedMap",
            "type": "t_mapping(t_bytes32,t_contract(AggregatorV3Interface)45)",
            "src": "src/ChainlinkL1.sol:27"
          },
          {
            "contract": "ChainlinkL1",
            "label": "priceFeedKeys",
            "type": "t_array(t_bytes32)dyn_storage",
            "src": "src/ChainlinkL1.sol:28"
          },
          {
            "contract": "ChainlinkL1",
            "label": "rootBridge",
            "type": "t_contract(RootBridge)16191",
            "src": "src/ChainlinkL1.sol:29"
          },
          {
            "contract": "ChainlinkL1",
            "label": "priceFeedL2Address",
            "type": "t_address",
            "src": "src/ChainlinkL1.sol:30"
          },
          {
            "contract": "ChainlinkL1",
            "label": "prevTimestampMap",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "src/ChainlinkL1.sol:31"
          },
          {
            "contract": "ChainlinkL1",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/ChainlinkL1.sol:45"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_contract(AggregatorV3Interface)45)": {
            "label": "mapping(bytes32 => contract AggregatorV3Interface)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_contract(AggregatorV3Interface)45": {
            "label": "contract AggregatorV3Interface"
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_contract(RootBridge)16191": {
            "label": "contract RootBridge"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "9912605244925ac7f868e922f9a7bbf1d48867f29ae4bcc4c1a1a9a55a9fcbfc": {
      "address": "0x915541Da148D310Cb4D4488E3f2a4f29696c7D83",
      "txHash": "0x0b23e68e8b86ce7314fd8c867db212a51b508a022d7c492ec833b48c03a32ead",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "MerkleRedeemUpgradeSafe",
            "label": "weekMerkleRoots",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "src/staking/Balancer/MerkleRedeemUpgradeSafe.sol:22"
          },
          {
            "contract": "MerkleRedeemUpgradeSafe",
            "label": "claimed",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "src": "src/staking/Balancer/MerkleRedeemUpgradeSafe.sol:23"
          },
          {
            "contract": "MerkleRedeemUpgradeSafe",
            "label": "token",
            "type": "t_contract(IERC20)2022",
            "src": "src/staking/Balancer/MerkleRedeemUpgradeSafe.sol:25"
          },
          {
            "contract": "MerkleRedeemUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/staking/Balancer/MerkleRedeemUpgradeSafe.sol:40"
          },
          {
            "contract": "BlockContext",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/BlockContext.sol:13"
          },
          {
            "contract": "PerpRewardVesting",
            "label": "merkleRootTimestampMap",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "src/staking/PerpRewardVesting.sol:20"
          },
          {
            "contract": "PerpRewardVesting",
            "label": "merkleRootIndexes",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "src/staking/PerpRewardVesting.sol:23"
          },
          {
            "contract": "PerpRewardVesting",
            "label": "vestingPeriod",
            "type": "t_uint256",
            "src": "src/staking/PerpRewardVesting.sol:25"
          },
          {
            "contract": "PerpRewardVesting",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/staking/PerpRewardVesting.sol:37"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IERC20)2022": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "966d41e8f63226c85645c8adbd6c66e95956bde935d2451d4b02b92a3db10049": {
      "address": "0x572Bf61be66ED5e07d3C3030edA004E827f29D59",
      "txHash": "0x010dbac1398ffcfce2895e23b89779f01c81b4a4103f5d7c46d5cde5e251fb52",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "DecimalERC20",
            "label": "decimalMap",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "src/utils/DecimalERC20.sol:12"
          },
          {
            "contract": "DecimalERC20",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/DecimalERC20.sol:23"
          },
          {
            "contract": "FeeTokenPoolDispatcherL1",
            "label": "feeRewardPoolMap",
            "type": "t_mapping(t_contract(IERC20)2022,t_contract(IRewardRecipient)18750)",
            "src": "src/staking/FeeTokenPoolDispatcherL1.sol:27"
          },
          {
            "contract": "FeeTokenPoolDispatcherL1",
            "label": "feeTokens",
            "type": "t_array(t_address)dyn_storage",
            "src": "src/staking/FeeTokenPoolDispatcherL1.sol:28"
          },
          {
            "contract": "FeeTokenPoolDispatcherL1",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/staking/FeeTokenPoolDispatcherL1.sol:43"
          }
        ],
        "types": {
          "t_mapping(t_contract(IERC20)2022,t_contract(IRewardRecipient)18750)": {
            "label": "mapping(contract IERC20 => contract IRewardRecipient)"
          },
          "t_contract(IERC20)2022": {
            "label": "contract IERC20"
          },
          "t_contract(IRewardRecipient)18750": {
            "label": "contract IRewardRecipient"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "33c73d38821ee1faacfcb5b5824026dfa096f2293abfba3fdb815b24748c0a26": {
      "address": "0xB66aF11248300F6A8875f9214593b02e6F4Ed535",
      "txHash": "0xc7cffcce45b7a90705331f2bbe1e4fbfd89a1382c74a73a5de7a981103bc67c6",
      "layout": {
        "storage": [
          {
            "contract": "DecimalERC20",
            "label": "decimalMap",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "src/utils/DecimalERC20.sol:12"
          },
          {
            "contract": "DecimalERC20",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/DecimalERC20.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "BlockContext",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/BlockContext.sol:13"
          },
          {
            "contract": "StakedPerpToken",
            "label": "name",
            "type": "t_string_storage",
            "src": "src/staking/StakedPerpToken.sol:40"
          },
          {
            "contract": "StakedPerpToken",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "src/staking/StakedPerpToken.sol:41"
          },
          {
            "contract": "StakedPerpToken",
            "label": "decimals",
            "type": "t_uint8",
            "src": "src/staking/StakedPerpToken.sol:42"
          },
          {
            "contract": "StakedPerpToken",
            "label": "totalSupplyHistory",
            "type": "t_struct(History)30895_storage",
            "src": "src/staking/StakedPerpToken.sol:46"
          },
          {
            "contract": "StakedPerpToken",
            "label": "balancesHistory",
            "type": "t_mapping(t_address,t_struct(History)30895_storage)",
            "src": "src/staking/StakedPerpToken.sol:49"
          },
          {
            "contract": "StakedPerpToken",
            "label": "stakerCooldown",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "src/staking/StakedPerpToken.sol:52"
          },
          {
            "contract": "StakedPerpToken",
            "label": "stakerWithdrawPendingBalance",
            "type": "t_mapping(t_address,t_struct(decimal)31462_storage)",
            "src": "src/staking/StakedPerpToken.sol:55"
          },
          {
            "contract": "StakedPerpToken",
            "label": "stakeModules",
            "type": "t_array(t_address)dyn_storage",
            "src": "src/staking/StakedPerpToken.sol:57"
          },
          {
            "contract": "StakedPerpToken",
            "label": "perpToken",
            "type": "t_contract(IERC20)2022",
            "src": "src/staking/StakedPerpToken.sol:58"
          },
          {
            "contract": "StakedPerpToken",
            "label": "cooldownPeriod",
            "type": "t_uint256",
            "src": "src/staking/StakedPerpToken.sol:59"
          },
          {
            "contract": "StakedPerpToken",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/staking/StakedPerpToken.sol:73"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_struct(History)30895_storage": {
            "label": "struct Checkpointing.History",
            "members": [
              {
                "label": "history",
                "type": "t_array(t_struct(Checkpoint)30891_storage)dyn_storage"
              }
            ]
          },
          "t_array(t_struct(Checkpoint)30891_storage)dyn_storage": {
            "label": "struct Checkpointing.Checkpoint[]"
          },
          "t_struct(Checkpoint)30891_storage": {
            "label": "struct Checkpointing.Checkpoint",
            "members": [
              {
                "label": "time",
                "type": "t_uint64"
              },
              {
                "label": "value",
                "type": "t_uint192"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_struct(History)30895_storage)": {
            "label": "mapping(address => struct Checkpointing.History)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(decimal)31462_storage)": {
            "label": "mapping(address => struct Decimal.decimal)"
          },
          "t_struct(decimal)31462_storage": {
            "label": "struct Decimal.decimal",
            "members": [
              {
                "label": "d",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IERC20)2022": {
            "label": "contract IERC20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "1af2111dc40444058452ca9cf9b12ceb4a079b22882d060c5cbfa818397f75bc": {
      "address": "0x8C29F6F7fc1999aB84b476952E986F974Acb3824",
      "txHash": "0x4fe7024a87e632f1c844a12fa6126a69266b52c5a4811a44466576cabc19fd86",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "BlockContext",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/BlockContext.sol:13"
          },
          {
            "contract": "DecimalERC20",
            "label": "decimalMap",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "src/utils/DecimalERC20.sol:12"
          },
          {
            "contract": "DecimalERC20",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/DecimalERC20.sol:23"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "userRewardPerTokenPaid",
            "type": "t_mapping(t_address,t_struct(decimal)31462_storage)",
            "src": "src/staking/FeeRewardPoolL1.sol:47"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "rewards",
            "type": "t_mapping(t_address,t_struct(decimal)31462_storage)",
            "src": "src/staking/FeeRewardPoolL1.sol:49"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "rewardPerTokenStored",
            "type": "t_struct(decimal)31462_storage",
            "src": "src/staking/FeeRewardPoolL1.sol:52"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "rewardRate",
            "type": "t_struct(decimal)31462_storage",
            "src": "src/staking/FeeRewardPoolL1.sol:54"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "lastUpdateTime",
            "type": "t_uint256",
            "src": "src/staking/FeeRewardPoolL1.sol:57"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "periodFinish",
            "type": "t_uint256",
            "src": "src/staking/FeeRewardPoolL1.sol:58"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "feeTokenPoolDispatcher",
            "type": "t_address",
            "src": "src/staking/FeeRewardPoolL1.sol:60"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "stakedPerpToken",
            "type": "t_contract(StakedPerpToken)30880",
            "src": "src/staking/FeeRewardPoolL1.sol:61"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "token",
            "type": "t_contract(IERC20)2022",
            "src": "src/staking/FeeRewardPoolL1.sol:62"
          },
          {
            "contract": "FeeRewardPoolL1",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/staking/FeeRewardPoolL1.sol:78"
          }
        ],
        "types": {
          "t_mapping(t_address,t_struct(decimal)31462_storage)": {
            "label": "mapping(address => struct Decimal.decimal)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(decimal)31462_storage": {
            "label": "struct Decimal.decimal",
            "members": [
              {
                "label": "d",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(StakedPerpToken)30880": {
            "label": "contract StakedPerpToken"
          },
          "t_contract(IERC20)2022": {
            "label": "contract IERC20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "75646e9907b25e12222588b85c1c6892475df655e7ca4e9579ff10c86550bd73": {
      "address": "0xc1fd04c84919861E4E736E91199Df601e0469252",
      "txHash": "0x423fe23910b2352ca6d17260f1e59d8017bccee523298cd264cb9b8246faa61b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "MerkleRedeemUpgradeSafe",
            "label": "weekMerkleRoots",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "src/staking/Balancer/MerkleRedeemUpgradeSafe.sol:22"
          },
          {
            "contract": "MerkleRedeemUpgradeSafe",
            "label": "claimed",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "src": "src/staking/Balancer/MerkleRedeemUpgradeSafe.sol:23"
          },
          {
            "contract": "MerkleRedeemUpgradeSafe",
            "label": "token",
            "type": "t_contract(IERC20)2022",
            "src": "src/staking/Balancer/MerkleRedeemUpgradeSafe.sol:25"
          },
          {
            "contract": "MerkleRedeemUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/staking/Balancer/MerkleRedeemUpgradeSafe.sol:40"
          },
          {
            "contract": "BlockContext",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/BlockContext.sol:13"
          },
          {
            "contract": "PerpRewardVesting",
            "label": "merkleRootTimestampMap",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "src/staking/PerpRewardVesting.sol:20"
          },
          {
            "contract": "PerpRewardVesting",
            "label": "merkleRootIndexes",
            "type": "t_array(t_uint256)dyn_storage",
            "src": "src/staking/PerpRewardVesting.sol:23"
          },
          {
            "contract": "PerpRewardVesting",
            "label": "vestingPeriod",
            "type": "t_uint256",
            "src": "src/staking/PerpRewardVesting.sol:25"
          },
          {
            "contract": "PerpRewardVesting",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/staking/PerpRewardVesting.sol:37"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IERC20)2022": {
            "label": "contract IERC20"
          }
        }
      }
    },
    "ef7c9816be9c656792f27386d6f169be879f8f331c145d348515b9f054aa1cbd": {
      "address": "0x1f5558d6D593278e6d35178Dd28C88723468113C",
      "txHash": "0xefe8fa752d92358a811819af9949b339eeb47e9ba95f9289745a90a8a3ee6e95",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "LowLevelErrorMessage",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/LowLevelErrorMessage.sol:15"
          },
          {
            "contract": "MetaTxGateway",
            "label": "domainSeperatorL1",
            "type": "t_bytes32",
            "src": "src/MetaTxGateway.sol:53"
          },
          {
            "contract": "MetaTxGateway",
            "label": "domainSeperatorL2",
            "type": "t_bytes32",
            "src": "src/MetaTxGateway.sol:54"
          },
          {
            "contract": "MetaTxGateway",
            "label": "nonces",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "src/MetaTxGateway.sol:55"
          },
          {
            "contract": "MetaTxGateway",
            "label": "whitelistMap",
            "type": "t_mapping(t_address,t_bool)",
            "src": "src/MetaTxGateway.sol:58"
          },
          {
            "contract": "MetaTxGateway",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/MetaTxGateway.sol:74"
          }
        ],
        "types": {
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bfb6e4095d6f8a92945f458eb62a153e7b21acf3060fe119f595f3f90fcd6156": {
      "address": "0xE70E994265BE09aE54a8DA0969898d5fe073c9cB",
      "txHash": "0xf8ba172af7b3571f9c32adcdabfbc271d60e0c06bd4030ef37ef347a24a33a15",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "DecimalERC20",
            "label": "decimalMap",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "src/utils/DecimalERC20.sol:12"
          },
          {
            "contract": "DecimalERC20",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/DecimalERC20.sol:23"
          },
          {
            "contract": "BaseBridge",
            "label": "ambBridge",
            "type": "t_contract(IAMB)16943",
            "src": "src/bridge/BaseBridge.sol:27"
          },
          {
            "contract": "BaseBridge",
            "label": "multiTokenMediator",
            "type": "t_contract(IMultiTokenMediator)16955",
            "src": "src/bridge/BaseBridge.sol:30"
          },
          {
            "contract": "BaseBridge",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/bridge/BaseBridge.sol:44"
          },
          {
            "contract": "BaseRelayRecipient",
            "label": "trustedForwarder",
            "type": "t_address",
            "src": "@opengsn/gsn/contracts/BaseRelayRecipient.sol:16"
          },
          {
            "contract": "ClientBridge",
            "label": "versionRecipient",
            "type": "t_string_storage",
            "src": "src/bridge/xDai/ClientBridge.sol:17"
          },
          {
            "contract": "ClientBridge",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/bridge/xDai/ClientBridge.sol:19"
          },
          {
            "contract": "ClientBridge",
            "label": "minWithdrawalAmountMap",
            "type": "t_mapping(t_address,t_struct(decimal)32217_storage)",
            "src": "src/bridge/xDai/ClientBridge.sol:26"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(decimal)32217_storage)": {
            "label": "mapping(address => struct Decimal.decimal)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(decimal)32217_storage": {
            "label": "struct Decimal.decimal",
            "members": [
              {
                "label": "d",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IAMB)16943": {
            "label": "contract IAMB"
          },
          "t_contract(IMultiTokenMediator)16955": {
            "label": "contract IMultiTokenMediator"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "8d396f2a6ce9829100283c4864e7526a81f0c58ea42e739b622c4b4092b646fb": {
      "address": "0x30474dd46fd3d5138adb3fBc431DE4e8BF00dEaC",
      "txHash": "0xa1c585e2901b4f3f4cc72bb6c300ad31ddfdb382a6a251fac24941acc463dbaf",
      "layout": {
        "storage": [
          {
            "contract": "DecimalERC20",
            "label": "decimalMap",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "src/utils/DecimalERC20.sol:12"
          },
          {
            "contract": "DecimalERC20",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/DecimalERC20.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:26"
          },
          {
            "contract": "Initializable",
            "label": "______gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol:61"
          },
          {
            "contract": "ContextUpgradeSafe",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol:37"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_owner",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:20"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "_candidate",
            "type": "t_address",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:21"
          },
          {
            "contract": "PerpFiOwnableUpgrade",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/PerpFiOwnableUpgrade.sol:95"
          },
          {
            "contract": "BlockContext",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/utils/BlockContext.sol:13"
          },
          {
            "contract": "StakedPerpToken",
            "label": "name",
            "type": "t_string_storage",
            "src": "src/staking/StakedPerpToken.sol:40"
          },
          {
            "contract": "StakedPerpToken",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "src/staking/StakedPerpToken.sol:41"
          },
          {
            "contract": "StakedPerpToken",
            "label": "decimals",
            "type": "t_uint8",
            "src": "src/staking/StakedPerpToken.sol:42"
          },
          {
            "contract": "StakedPerpToken",
            "label": "totalSupplyHistory",
            "type": "t_struct(History)31669_storage",
            "src": "src/staking/StakedPerpToken.sol:46"
          },
          {
            "contract": "StakedPerpToken",
            "label": "balancesHistory",
            "type": "t_mapping(t_address,t_struct(History)31669_storage)",
            "src": "src/staking/StakedPerpToken.sol:49"
          },
          {
            "contract": "StakedPerpToken",
            "label": "stakerCooldown",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "src/staking/StakedPerpToken.sol:52"
          },
          {
            "contract": "StakedPerpToken",
            "label": "stakerWithdrawPendingBalance",
            "type": "t_mapping(t_address,t_struct(decimal)32236_storage)",
            "src": "src/staking/StakedPerpToken.sol:55"
          },
          {
            "contract": "StakedPerpToken",
            "label": "stakeModules",
            "type": "t_array(t_address)dyn_storage",
            "src": "src/staking/StakedPerpToken.sol:57"
          },
          {
            "contract": "StakedPerpToken",
            "label": "perpToken",
            "type": "t_contract(IERC20)2022",
            "src": "src/staking/StakedPerpToken.sol:58"
          },
          {
            "contract": "StakedPerpToken",
            "label": "cooldownPeriod",
            "type": "t_uint256",
            "src": "src/staking/StakedPerpToken.sol:59"
          },
          {
            "contract": "StakedPerpToken",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "src/staking/StakedPerpToken.sol:73"
          }
        ],
        "types": {
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_struct(History)31669_storage": {
            "label": "struct Checkpointing.History",
            "members": [
              {
                "label": "history",
                "type": "t_array(t_struct(Checkpoint)31665_storage)dyn_storage"
              }
            ]
          },
          "t_array(t_struct(Checkpoint)31665_storage)dyn_storage": {
            "label": "struct Checkpointing.Checkpoint[]"
          },
          "t_struct(Checkpoint)31665_storage": {
            "label": "struct Checkpointing.Checkpoint",
            "members": [
              {
                "label": "time",
                "type": "t_uint64"
              },
              {
                "label": "value",
                "type": "t_uint192"
              }
            ]
          },
          "t_uint64": {
            "label": "uint64"
          },
          "t_uint192": {
            "label": "uint192"
          },
          "t_mapping(t_address,t_struct(History)31669_storage)": {
            "label": "mapping(address => struct Checkpointing.History)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(decimal)32236_storage)": {
            "label": "mapping(address => struct Decimal.decimal)"
          },
          "t_struct(decimal)32236_storage": {
            "label": "struct Decimal.decimal",
            "members": [
              {
                "label": "d",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_contract(IERC20)2022": {
            "label": "contract IERC20"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    }
  },
  "admin": {
    "address": "0x0C55fE453eC5166FA56e495Dc02953cB0E29A67a",
    "txHash": "0x14b711ba235d256850a5b3b39beb45aaaa5c01d5269bf6701505b597e0329458"
  }
}
